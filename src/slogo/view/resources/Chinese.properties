penColorLabel = 画笔颜色 :
backgroundColorLabel = 背景颜色 :
title = Logo解释器
userCommand = 在此处输入命令...
runButton = 运行
helpTitle = 帮助
command = 命令
queries = 查询
math = 数学运算
boolean = 布尔运算
variable = 变量
user = 用户定义的命令
uploadFile = 上传文件以运行
uploadToText = 将文件载入到文本框
fontPicker = 选择一种字体
fontOptions = Times New Roman, Arial
fontSize = 选择字体大小
themePicker = 选择主题
themeOptions = 暗色,白色,粉色
turtleList =SadTurtle,Jiyang,Joshua,Oliver
turtleText = 选择乌龟预设
commandList = qianjin,houtui|ht,zuozhuan|zz, youzhuan|yz, dingjiaodu|jd, chaoxiang, weizhi, luobi|lb, taibi|tb, xianshi|xs, yinshen|ys,jia, qingping|qp
queriesList = xzuobiao, yzuobiao,jiaodu, luobi?, xianshi?
mathList = jia|+, jian|-, cheng|*, chu|/, yushu|%, fu|~, suiji, zhengxian, yuxian, zhengqie, nizhengqie, ziranduishu, mi, pi
booleanList = xiaoyu, dayu, dengyu, budengyu, he, huo , bu
variableList = zuo|she
userList = chongfu, zuocishu, dang, ruguo, qitaruguo, zidingyi
turtleUpload = 上传您自定义乌龟图片!
prevCommand = 先前的命令
qianjin=moves turtle forward in its current heading by pixels distance returns distance turtle moved (the value of pixels)
houtui|ht=moves turtle backward in its current heading by pixels distance returns distance turtle moved (the value of pixels)
zuozhuan|zz= turns turtle counterclockwise by degrees angle returns amount turtle turned (the value of degrees)
right|rt = turns turtle clockwise by degrees angle returns amount turtle turned (the value of degrees)
setheading|seth=turns turtle to an absolute heading returns number of degrees moved
towards=turns turtle to face the point (x, y), where (0, 0) is the center of the screen returns the number of degrees turtle turned
setxy|goto= moves turtle to an absolute screen position, where (0, 0) is the center of the screen returns distance turtle moved
pendown|pd=puts pen down such that when the turtle moves, it leaves a trail returns 1
penup|pu= puts pen up such that when the turtle moves, it does not leave a trail returns 0
showturtle|st= makes turtle visible returns 1
hideturtle|ht= makes turtle invisible returns 0
home= moves turtle to the center of the screen (0 0) returns distance turtle moved
clearscreen|cs=erases turtle's trails and sends it to the home position returns distance turtle moved
xcor= returns the turtle's X coordinate from the center of the screen
ycor=returns the turtle's Y coordinate from the center of the screen
heading=returns the turtle's heading in degrees
pendown?=returns 1 if turtle's pen is down, 0 if it is up
showing?=returns 1 if turtle is showing, 0 if it is hiding
sum|+=SUM expr1 expr2 or + expr1 expr2.  returns sum of the values of expr1 and expr2
difference|-= DIFFERENCE expr1 expr2 or- expr1 expr2. returns difference of the values of expr1 and expr2
product|*= PRODUCT expr1 expr2 or * expr1 expr2 returns product of the values of expr1 and expr2
quotient|/= returns quotient of the values of expr1 and expr2
remainder|%= returns remainder on dividing the values of expr1 by expr2
minus|~= returns negative of the values of expr
random= returns random non-negative number strictly less than max
sin= returns sine of degrees
cos= return cosine of degrees
tan= returns tangent of degrees
atan=returns arctangent of degrees
log= returns natural log of expr
pow= returns base raised to the power of the exponent
pi= returns value of the number Pi (Math.PI)
less= LESS? expr1 expr2 or LESSP expr1 expr2. returns 1 if the value of expr1 is strictly less than the value of expr2, otherwise 0
greater= GREATER? expr1 expr2 or GREATERP expr1 expr2. returns 1 if the value of expr1 is strictly greater than the value of expr2, otherwise 0
equal= EQUAL? expr1 expr2 or EQUALP expr1 expr2. returns 1 if the value of expr1 and the value of expr2 are equal, otherwise 0
notequal= NOTEQUAL? expr1 expr2 or NOTEQUALP expr1 expr2. returns 1 if the value of expr1 and the value of expr2 are not equal, otherwise 0
and= AND test1 test2. returns 1 if test1 and test2 are non-zero, otherwise 0
or= OR test1 test2. returns 1 if test1 or test2 are non-zero, otherwise 0
not= NOT test. returns 1 if test is 0 and 0 if test is non-zero
make|set=MAKE variable expr \n SET variable expr \n assigns the value of expr to variable, creating the variable if necessary returns exp
repeat= runs command(s) given in the list the value of expr number of times returns the value of the final command executed (or 0 if no commands are executed) note, the value of the current iteration, starting at 1, is automatically assigned to the variable :repcount so that it can be accessed by the command(s)
dotimes= runs command(s) for each value specified in the range, i.e., from (1 - limit) inclusive returns the value of the final command executed (or 0 if no commands are executed) note, variable is assigned to each succeeding value so that it can be accessed by the command(s)
for= runs command(s) for each value specified in the range, i.e., from (start - end), going by increment returns the value of the final command executed (or 0 if no commands are executed) note, variable is assigned to each succeeding value so that it can be accessed by the command(s)
if=if expr is not 0, runs the command(s) given in the list returns the value of the final command executed (or 0 if no commands are executed)
ifelse=if expr is not 0, runs the trueCommands given in the first list, otherwise runs the falseCommands given in the second list returns the value of the final command executed (or 0 if no commands are executed)
to= assigns command(s) given in the second list to commandName using parameters given in first list as variables when commandName is used later in a program, any given values are assigned to variables that can be accessed when the command list is run and the value of the final command executed is returned (or 0 if no commands are executed) returns 1 if command is successfully defined, otherwise 0

